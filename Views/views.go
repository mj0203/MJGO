// Code generated by go-bindata.
// sources:
// Views/index/index.html
// Views/layout/footer.html
// Views/layout/header.html
// Views/user/index.html
// DO NOT EDIT!

package Views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsIndexIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x41\x6b\xd4\x40\x14\xbe\xf7\x57\x3c\x87\x42\x93\x83\xc9\x56\x11\xca\x9a\xe4\xe0\xa1\xe0\x41\x3c\x78\x14\x0f\xd3\xc9\x4b\x37\x38\xc9\x84\x99\xc9\xb6\x4b\x59\x10\x4a\xa5\xa5\x50\x45\xbd\x29\x14\x0a\x0b\x0a\xda\x22\x05\xab\x16\xed\x9f\x31\xd9\xf5\x5f\x48\x26\xbb\xdb\xee\xae\xd4\x75\x2e\x3b\x3b\x6f\xbe\x6f\xde\x7b\xdf\xf7\xe2\x29\xdd\xe1\x18\x2c\x00\x00\x64\xb0\x65\x7e\xab\x95\x50\xb9\x1e\xa7\x4d\x58\x96\x98\x40\x43\x62\x72\xd7\x84\xba\x0b\x9e\x3b\x44\x78\x61\xdc\x06\x46\x65\x58\x83\xcb\x8f\x47\x83\x8b\x83\xc1\xc5\xdb\x62\xa7\x97\xac\x8b\xfe\xe9\x79\xff\xfc\xd0\x44\xbc\x48\xc8\x24\x18\x33\x7b\xd9\xe5\xde\xfc\x8f\xd3\x2c\xd7\xa0\x3b\x19\xfa\x44\xe3\xa6\x26\xd0\xa6\x3c\x47\x9f\x10\xc8\x38\x65\xd8\x12\x3c\x44\xe9\x93\xc1\xc9\xd9\xe0\xe7\xeb\x62\xa7\x57\x3c\xdf\x29\x8e\xbf\x11\x70\xaf\x90\xba\xd9\x35\x2f\x3c\xe8\x3c\x42\x8e\x4c\x43\x4a\x13\xf4\x49\xc6\x69\x07\x25\x01\x4e\xd7\x90\x1b\xde\xdf\xcf\xf6\xca\xfd\x0f\xfd\xdd\xcf\x45\xef\x07\x99\x04\x0f\x09\x1e\x66\x3a\x16\xe9\x28\xb3\x65\x12\xf4\x4f\x8e\xfb\x2f\xb7\x3d\x77\x14\x9a\x03\x75\x8b\x04\x83\x2f\xa7\xff\x8b\xba\x4d\x82\xf2\xe0\xd5\x35\xa8\xea\xbc\xae\x6f\xde\x7e\x54\x5d\xa6\x12\x29\x48\xb1\xa1\xaa\x17\x80\x09\xae\x7c\xb2\xd2\x20\x81\xe7\x8e\xa2\xf3\xb2\xcd\xea\x37\x6c\x73\x4b\xa4\xf8\x4f\x31\xcb\xbd\xfd\xf2\xdd\xf7\xe2\xc5\x19\x81\x8d\xe5\xc6\x55\x4d\x67\xc8\xd7\x72\xad\x45\x3a\x66\x2c\x0f\x7b\x83\x93\x23\x02\x2a\x67\x0c\x95\x02\xe3\x4b\x9f\xd4\xce\xbd\xc9\x31\xd2\x4d\x70\xee\x54\xd6\x1d\x65\xa4\x90\x4a\xd6\xba\xa7\xd3\x6b\xbd\xe3\x51\x68\x49\x8c\x7c\xe2\xe6\x0a\xa5\x1b\xa7\x21\x6e\x3a\x2d\x9d\x70\x12\xd4\xf6\xee\xbf\x79\x5f\xee\x9e\xfd\xfa\xfa\xa9\xb8\xd8\xf6\x5c\x1a\x4c\x31\x8c\xe0\x2d\xad\xb3\xa6\xeb\x6a\x21\xb8\x72\xa2\x58\xe2\x4a\xc3\x61\x22\x21\x41\xbd\xaf\x90\xf5\x7c\xb8\xf5\x80\x78\x6e\x18\xb7\x83\x05\x4f\x31\x19\x67\x43\x2d\x17\xad\x28\x4f\x99\xb1\x83\x65\x5f\x19\xcf\x45\x6b\xc9\x74\xe6\xf1\x74\x61\x4f\x96\x6c\x87\xf1\x98\x3d\x1d\x03\x2d\x7b\x6b\xa2\xa5\x6d\x2a\xc1\x48\x03\x3e\x2c\x3a\x5a\xc6\x89\x35\xc5\x56\x0b\x57\x31\xb5\x29\xb7\x6c\x7b\x02\x1e\x47\xd6\x0d\x73\x61\x8a\xb6\x5a\xab\x66\xb0\x1c\x1d\x67\xca\xfa\x9b\xc2\xf6\x0c\x42\xa2\xce\x65\x3a\x71\xdc\x9d\xc9\xb6\x92\xe1\x7e\x1a\x09\xf0\x61\x35\x74\x72\xc9\xad\xb1\x34\x91\x20\xb6\x13\x52\x4d\xad\x2d\x93\x54\xb3\x2e\xad\x6b\x3b\x99\x50\xda\x9a\x7c\x90\x89\x54\x09\x8e\x0e\x17\xeb\xd6\x88\xf3\xf2\x46\xb7\xde\x76\xed\xea\x13\x57\x4b\xf0\x27\x00\x00\xff\xff\x6e\xad\x0b\x3c\x1d\x05\x00\x00")

func viewsIndexIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexIndexHtml,
		"Views/index/index.html",
	)
}

func viewsIndexIndexHtml() (*asset, error) {
	bytes, err := viewsIndexIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Views/index/index.html", size: 1309, mode: os.FileMode(420), modTime: time.Unix(1569461826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsLayoutFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x50\x50\x50\xb0\x49\xc9\x2c\x53\xc8\x4c\xb1\x55\x4a\xcb\xcf\x2f\x49\x2d\x52\xb2\x7b\xb1\x7f\xe6\xb3\x19\xeb\x5f\x2e\xdc\xfa\xa2\x65\x96\x8d\x7e\x4a\x66\x99\x1d\x17\x58\x5d\x71\x72\x51\x66\x41\x89\x42\x49\x65\x41\xaa\xad\x52\x49\x6a\x45\x89\x7e\x56\x62\x59\x22\x44\x54\x49\xa1\xb8\x28\xd9\x56\x49\x3f\xb8\x24\xb1\x24\x33\x59\x3f\xab\x58\x3f\x37\x31\x33\x4f\x2f\xab\x58\xc9\xce\x46\x1f\xa2\xc4\x8e\xcb\x46\x3f\x29\x3f\xa5\x12\x44\x67\x94\xe4\xe6\xd8\x01\x02\x00\x00\xff\xff\x1e\xb7\x61\xb8\x7d\x00\x00\x00")

func viewsLayoutFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutFooterHtml,
		"Views/layout/footer.html",
	)
}

func viewsLayoutFooterHtml() (*asset, error) {
	bytes, err := viewsLayoutFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Views/layout/footer.html", size: 125, mode: os.FileMode(420), modTime: time.Unix(1570154944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsLayoutHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd2\xb1\x4e\xc3\x30\x10\x06\xe0\xbd\x4f\x61\xbc\xd7\x16\xb0\x30\x38\x96\x10\xd0\x0d\x81\xa0\x0c\x8c\x57\xe7\xda\x38\x38\x4e\xb0\xaf\xa5\x79\x11\x04\x63\x25\xc4\xca\x42\x67\x9e\x06\x44\xdf\x02\x45\x2e\x02\x09\xb6\x76\xb1\xad\xff\x4e\x9f\x75\xd2\xa9\x9d\xe3\xb3\xa3\xe1\xf5\xf9\x09\x2b\xa8\x72\xba\xa7\xba\x8b\x39\xf0\x93\x8c\xa3\xe7\x5d\x80\x90\xeb\x1e\x63\x8c\xa9\x0a\x09\x98\x29\x20\x44\xa4\x8c\x5f\x0d\x07\xfd\x03\xbe\x2e\x91\x25\x87\xba\x9a\xd4\x4a\xa6\x67\x8a\xa3\x09\xb6\x21\x46\x6d\x83\x19\x27\x9c\x93\x2c\x61\x06\x29\xe5\x2c\x06\x93\x71\x79\x49\x40\xd6\xc8\x32\xca\xf2\x76\x8a\xa1\xed\xef\x8b\x3d\xb1\x2b\x2a\xeb\x45\x19\xb9\x56\x32\xb5\x6f\x20\x0a\x30\x34\x05\xb7\x1d\xf2\xb0\x69\x4e\x61\x8b\xd0\x05\xde\x05\x4b\xb8\xb9\x37\x70\xd0\x62\xd8\x82\x93\x03\xc1\x7f\x8c\xb3\xfe\x86\x05\x74\x19\x8f\xd4\x3a\x8c\x05\x22\xf1\xdf\xaa\x89\x91\xb3\x22\xe0\xf8\xc7\x33\xf1\xcf\xa0\x5d\x97\xee\x29\x99\x16\x4b\x8d\xea\xbc\x5d\x7f\x90\xdb\x99\xfe\x7c\x7b\xfc\x78\x78\x59\x2d\x96\xef\x4f\xaf\x4a\x76\x49\xaa\xc1\x37\x6c\x7d\x8e\xf3\x74\x8a\x6e\x59\xb9\x56\xa3\x29\x51\xed\x99\xf5\xe3\x5a\xaf\x9e\xef\x57\x8b\xa5\x92\x29\xd3\x4a\x82\xfe\x0a\x00\x00\xff\xff\xc0\xbc\x42\x40\xe4\x02\x00\x00")

func viewsLayoutHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutHeaderHtml,
		"Views/layout/header.html",
	)
}

func viewsLayoutHeaderHtml() (*asset, error) {
	bytes, err := viewsLayoutHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Views/layout/header.html", size: 740, mode: os.FileMode(420), modTime: time.Unix(1570780310, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsUserIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdd\x6a\x24\x45\x14\xbe\xcf\x53\x9c\x94\xd9\x9d\x6e\x92\xe9\x9e\xac\x11\x64\xa6\x7b\x2e\x5c\x08\x08\x2a\x82\x78\xb5\x84\xa5\xa6\xbb\x66\xba\x4c\x4d\x55\x5b\x5d\x3d\xc9\x90\xcd\x85\xa0\x10\x51\x51\x50\x8c\xa0\x20\x2b\x2e\xec\x95\xb9\x11\x03\x2b\xac\x2f\xe3\xcc\xc6\xb7\x90\xaa\xfe\x99\xfe\x99\x44\xb3\x6c\x5f\xcc\x4f\xd5\x77\x4e\x9d\xf3\x9d\xef\x9c\x6a\x2f\x51\x73\x46\x40\xcd\x63\xe2\x23\x45\x8e\x95\x1b\x24\x09\x1a\x6e\x00\x00\x38\x63\x4a\x58\xb8\x03\xce\x0c\xb3\x94\xc0\x89\x59\xd4\x4f\x48\x93\x98\xe1\x79\x1f\x28\x67\x94\x93\xee\x88\x89\xe0\x70\x50\x6e\x47\x84\x4e\x22\xd5\x87\x7b\x92\x4c\x57\xab\x06\xb9\x7e\x6b\x24\x64\x48\x64\x77\x24\x94\x12\xd3\x3e\xec\xc6\xc7\x90\x08\x46\x43\x98\x48\x3c\xcf\x60\xa7\x95\x88\x2a\x91\x1c\xd1\x50\x45\x7d\xd8\x2b\xdd\xe5\xb8\x66\xc4\x39\x6e\xb7\xd7\x00\x2a\x3c\x62\x6b\x71\xbd\x3b\xad\xf0\x02\xc1\x18\x8e\x13\xd2\x2f\x7e\xd4\x1c\x8d\x44\x38\x07\x25\x2b\xbe\xda\xb9\x36\xa0\xaa\x9a\x89\xe6\xbe\x8b\x19\x9d\xf0\x3e\x04\x84\x2b\x22\x0b\x1b\xcf\x35\x35\x1a\x6e\x78\x21\x9d\x01\x0d\x7d\x34\xa3\xe4\xe8\xbe\xe0\x8a\x70\x95\x97\xca\xdb\xec\x76\x61\x71\xf6\xe3\xe2\xcf\x67\x2f\xbe\x7b\xba\x3c\xbb\x84\x6e\x37\xdf\xd1\x46\x01\x96\x21\x1c\xbd\xd1\x1b\x96\xc7\x79\x63\x21\xa7\xc0\xf0\x88\xb0\x87\x26\x69\x1f\xed\x21\xe3\x3c\x90\x04\x2b\xf2\x61\x42\xe4\xbe\x90\x53\xb4\x32\x31\x66\x71\xfd\xbf\x59\x7b\x77\xae\x91\x6f\x2b\x92\x3b\xf4\x51\x16\xc3\xe2\x9b\xaf\x50\x1b\x6e\x4c\x28\x8f\x53\x55\x51\x1d\x02\x8e\xa7\xc4\x47\xfa\x13\x81\xbb\xe6\x10\x77\x75\x4a\x23\x24\x37\x7e\xa9\x18\x97\x9f\x7f\xb1\xfc\xe9\xd9\xe2\xeb\xcb\xdb\xc6\x18\x47\x82\xbf\x82\x20\xc1\x54\x35\x73\x5d\x2f\xfc\x9a\x80\x6a\xc1\x8c\x52\xa5\x04\x47\x90\xa4\x41\x40\x92\x44\x17\x16\x04\x0f\x18\x0d\x0e\xab\xe5\xb3\x6c\x04\xa6\x0f\x7c\x94\x29\xa3\x15\x73\x2d\x2a\xcf\xd5\x92\xc8\x45\xe3\x86\x74\x56\x51\xd6\xf2\xe7\x27\x57\x17\xbf\xac\x55\x96\x60\x10\x8c\x80\x8f\x20\x8d\x27\x38\xde\xad\x4a\xac\x4d\x60\x1e\x4e\xc1\xe4\xc7\x29\x91\xf3\xf7\x33\x3a\x63\x86\x03\x12\x09\x16\x12\xe9\xa3\xab\x8b\xcb\xab\xe7\xdf\x2e\x3e\x7b\xb2\x2a\x52\x41\x57\xd1\xa1\x6f\xf6\xe2\xe3\x41\x2d\x23\x2f\xe3\x05\x28\x1f\x0b\x08\x18\x4e\x92\xfc\x84\xb7\x14\x47\x2b\x82\x26\x44\x69\x76\xde\xa1\x89\xb2\x6c\x34\xcc\x52\xf3\xdc\xcc\xf8\x9a\xf4\x7f\x78\xfe\xe2\xd7\xbc\xb1\x16\x67\xe7\x57\x8f\x9f\xfe\x67\x7b\x99\xc1\xd2\x60\x5b\x45\x04\x87\x6b\x6a\xab\xe4\x35\x0a\x54\x51\x23\xeb\xd7\x7b\x77\x06\x68\x58\x76\x97\xe7\xaa\xe8\x76\xa6\x25\x9f\xb7\x31\xdd\x33\xa6\x99\x86\x96\xe7\x7f\xfc\x73\xfe\xfb\x7a\x6b\xcf\x6d\x66\xa2\x71\xad\x9c\x3d\x33\x00\x5b\xc0\xfa\xa2\xe7\x56\x18\xcc\xeb\x51\x7c\x25\x81\xa4\x71\x55\x58\xee\x47\x78\x86\xb3\xd5\xbc\x77\xb6\xac\x71\xca\x03\x45\x05\x07\xcb\xae\x4c\xd9\xfd\xd0\x89\x94\x8a\x3f\xc8\x3a\xe7\xbe\x08\x09\xf8\x70\xaf\xd7\x1b\x6c\x94\x90\x9a\x3e\xb2\x11\x9c\x7d\x95\x1e\x6b\x88\x8a\xf3\x2d\x0b\x65\xf7\x89\xc9\x05\xd9\x0e\x99\xc6\x6a\x9e\x3b\xd1\xcf\x0c\x4b\x30\xd3\x03\x7c\xd8\x72\x94\xa4\x53\x6b\xcb\xea\x98\x36\x79\xd0\xea\x88\x83\x8e\xad\xaf\x31\xcb\xae\xdb\x4b\x92\xa4\x4c\x81\xaf\x53\x49\x25\xb3\x90\x9b\x26\x44\xba\x13\xa2\x12\x64\x3b\x21\x56\xd8\x3a\xc9\x47\x54\x3f\x3b\xec\xd4\x76\x62\x51\x26\xa3\x1f\x3a\xb6\xf6\x43\x27\x1f\x1f\x56\xe6\xd1\x86\xbb\x77\x73\xe7\xc6\x8b\xc3\x08\x9f\xa8\xc8\x3e\xa9\xd5\x49\x47\x90\xe6\xb9\x83\x5f\xc5\xb7\x60\x91\x9a\x82\x0f\x08\x0d\x6a\x3b\x63\x21\xc1\x62\x44\xc1\x21\x50\x5e\xba\x6a\x9c\xa2\x1f\x6d\xbe\xed\x03\xd2\xdd\x81\x6e\xd8\x0d\x87\x68\xbb\x70\xf3\xe0\xf0\xc0\xd1\x3c\x6e\x23\xcf\xd5\x1b\x83\x5b\xd8\x19\xaa\x5e\xc6\x30\x1b\xb8\xe1\x43\xac\xfe\x87\xb5\xee\x90\xc6\xfe\x69\xed\x5f\x4b\x43\x38\x8e\x09\x0f\xad\x48\x4d\x57\xf5\x3b\xad\xbc\x4d\x94\xaa\xac\x0e\xfe\x93\x9a\x64\xf4\x5c\x7f\x2f\x93\xfa\x96\xd5\x79\xad\x7e\xc1\x77\xec\x41\x0d\xac\xf9\x5b\xc9\xb3\x30\x75\xc6\x94\x87\x16\xaa\x48\xb5\xa3\x3f\x3b\x07\xa8\x10\xe9\x4e\x2d\x8d\x86\xca\x6f\x70\x63\x90\x15\x3f\x83\xaa\x4a\x37\x4d\x34\x8f\x1e\xc1\xa6\x81\x35\x64\xb2\xcf\xf0\x9c\x48\x47\xd1\x38\xb1\xf4\x95\xb1\xf8\xed\xcb\xc5\xf7\x9f\xfe\xfd\xd7\xe3\xe5\x27\x17\xc8\xae\xb3\x2c\x89\x4a\x25\x87\x31\x66\xc5\x7b\x5b\x9d\xfb\x1b\x5a\x2b\xe3\xab\x6c\x2e\x1d\x52\xdf\xd0\xb4\x93\xa5\x79\x6d\x9b\x05\x82\x27\x82\x11\x87\x89\x49\xd1\x64\x37\x8e\x19\xfd\xa6\x67\x86\xd8\xf0\xdf\x00\x00\x00\xff\xff\xce\xe9\x2b\x03\x96\x0b\x00\x00")

func viewsUserIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsUserIndexHtml,
		"Views/user/index.html",
	)
}

func viewsUserIndexHtml() (*asset, error) {
	bytes, err := viewsUserIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Views/user/index.html", size: 2966, mode: os.FileMode(420), modTime: time.Unix(1569471040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Views/index/index.html": viewsIndexIndexHtml,
	"Views/layout/footer.html": viewsLayoutFooterHtml,
	"Views/layout/header.html": viewsLayoutHeaderHtml,
	"Views/user/index.html": viewsUserIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Views": &bintree{nil, map[string]*bintree{
		"index": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{viewsIndexIndexHtml, map[string]*bintree{}},
		}},
		"layout": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{viewsLayoutFooterHtml, map[string]*bintree{}},
			"header.html": &bintree{viewsLayoutHeaderHtml, map[string]*bintree{}},
		}},
		"user": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{viewsUserIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

