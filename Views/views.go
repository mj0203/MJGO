// Code generated by go-bindata.
// sources:
// Views/index/index.html
// Views/layout/footer.html
// Views/layout/header.html
// DO NOT EDIT!

package Views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsIndexIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4f\x8b\x13\x4f\x10\xbd\xe7\x53\xd4\xaf\x09\xec\xcc\xe1\x97\xc9\x2a\x0b\xb2\xf6\xcc\xc1\x83\x37\xf1\xe0\x51\x3c\xf4\x76\x2a\xa6\xb1\xa7\xa7\xe9\xee\x99\x35\x2c\x01\x41\x56\x5c\x16\x54\xf4\x2a\x08\x42\x0e\x5e\x36\x88\xe0\xa2\xa0\xdf\x66\x26\xf1\x5b\xc8\xf4\x24\x31\x7f\x96\x35\xf6\x65\xa6\xbb\xfa\xbd\xaa\x7e\xf5\x8a\x5a\x37\x94\x98\xb4\x00\x00\x34\x9c\xf8\x6f\xbd\x52\x66\x1e\x0b\x75\x08\xfb\x06\x53\xe8\x1a\x4c\x6f\xfb\xd0\xa8\x45\xa3\x39\x82\xf6\x44\x01\x9c\x99\x5e\x03\xa6\xfd\xcc\xa4\xc9\x12\x4f\xf5\x9f\x7f\xbf\x17\x4a\xe7\x0e\xdc\x50\x63\x4c\x1c\x3e\x75\x04\x0a\x26\x73\x8c\x09\x01\x2d\x19\xc7\x41\x26\x7b\x68\x62\x32\x9b\x5c\xce\x7e\xbe\x2b\x4f\xc7\xe5\x8b\xd3\xf2\xe2\x1b\x81\x68\x85\x34\xd2\xd7\x64\xb8\x37\x7c\x80\x12\xb9\x03\xc5\x52\x8c\x89\x96\x6c\x88\x86\x80\x64\x47\x28\x3d\xef\xaf\x67\x67\xd5\xf9\xa7\xe9\xcb\xcf\xe5\xf8\x07\x59\x07\xcf\x09\xee\x6b\x27\x32\xb5\xa8\x6c\x9f\x24\xd3\xc9\xc5\xf4\xcd\x73\x1a\x2d\x42\x3b\xa0\x6e\x90\x64\xf6\xf5\xcb\xbf\xa2\x6e\x92\xa4\x7a\xf5\xf6\x1a\x54\x7d\xde\xbc\x6f\x57\x3d\x6a\x95\x99\x41\x06\x26\x3b\xb6\x75\x06\xe0\x99\xb4\x31\xb9\xd5\x25\x09\x8d\x16\xd1\x5d\xd9\xb6\xfb\x37\x97\x79\x90\x29\xfc\x6b\x33\xab\xb3\xf3\xea\xfd\xf7\xf2\xf5\x25\x81\xe3\x83\xee\x6a\x4f\xb7\xc8\x8f\x72\xe7\x32\xb5\x64\xac\x3e\x8c\x67\x93\x8f\x04\x6c\xce\x39\x5a\x0b\xde\x7d\x31\x69\xfc\xf9\xbf\xc4\xbe\x3b\x84\xce\x41\x6d\xd0\x45\x45\x16\x99\xe1\x83\x3b\x4e\x5d\xed\x1d\x1a\x35\x4e\xa5\x51\x4f\x14\x49\x8b\x5a\x6e\x84\x9e\x8b\xda\x0e\xfa\xb9\xe2\xbe\x2f\x41\xb8\x32\x0d\xed\x60\xcf\x97\xf8\x70\x33\xc3\xa3\xbd\xb0\xc3\xa5\xe0\x4f\x96\xc0\x20\x3c\x59\x7b\x5b\xc1\x0c\x78\x8d\x20\x86\x76\xc7\x19\x91\x06\x1b\x6c\x8d\x82\x35\x53\xc1\x64\x10\x86\x6b\x70\xd1\x0f\xfe\xf3\x17\x36\x68\xeb\x75\xd7\x3b\xbc\xe3\x84\xb6\xc1\x55\x52\x87\x5b\x08\x83\x2e\x37\x6a\xed\x78\xb4\xdc\x8d\x9a\xfb\xa3\xb0\x9e\xf1\x46\x94\xdf\x01\x00\x00\xff\xff\x28\x21\x01\x79\x1e\x04\x00\x00")

func viewsIndexIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexIndexHtml,
		"Views/index/index.html",
	)
}

func viewsIndexIndexHtml() (*asset, error) {
	bytes, err := viewsIndexIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Views/index/index.html", size: 1054, mode: os.FileMode(420), modTime: time.Unix(1571305295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsLayoutFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\x03\x04\x00\x00\xff\xff\x01\x05\x7a\xf0\x0f\x00\x00\x00")

func viewsLayoutFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutFooterHtml,
		"Views/layout/footer.html",
	)
}

func viewsLayoutFooterHtml() (*asset, error) {
	bytes, err := viewsLayoutFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Views/layout/footer.html", size: 15, mode: os.FileMode(420), modTime: time.Unix(1571280731, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsLayoutHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd1\x4f\x4b\xf4\x30\x10\x06\xf0\x7b\x3f\xc5\xbc\x73\xdf\x86\x57\x2f\x1e\xd2\x80\xa8\x2b\x08\xcb\x8a\xae\x07\x8f\x63\x3a\xda\xd4\x34\xd6\xcc\xf8\x27\xdf\x5e\x4a\x04\x05\x3d\xa9\xa7\x84\x67\x1e\x7e\x30\x8c\xfd\x77\xbc\x3d\xda\x5d\x9f\x9f\xc0\xa0\x53\x74\x8d\x5d\x1e\x88\x94\xee\x3a\xe4\x84\x4b\xc0\xd4\xbb\x06\x00\xc0\x4e\xac\x04\x7e\xa0\x2c\xac\x1d\x5e\xed\xd6\xab\x03\x7c\x1f\x69\xd0\xc8\x6e\x73\x76\xba\xb5\xa6\xfe\x6b\x2e\x3e\x87\x59\x41\xcb\xcc\x1d\x2a\xbf\xaa\x19\xe9\x99\x6a\x8a\x20\xd9\x77\x68\x2e\x95\x34\x78\x33\x8a\x19\x1f\x9f\x38\x97\xd5\x7e\xbb\xd7\xfe\x6f\xa7\x90\xda\x51\xd0\x59\x53\xeb\x3f\x12\x0f\xe7\x79\x43\x21\x5d\xf0\x4b\x0e\xca\xbf\xf7\xd6\x91\x0a\xe7\x3f\x70\x7a\x52\xfa\x8e\x89\x21\xdd\x43\xe6\xd8\xa1\x68\x89\x2c\x03\xb3\xe2\x67\xd5\x8b\x20\x0c\x99\x6f\x3f\x3c\x2f\x5f\x16\x5d\x5a\xae\xb1\xa6\x5e\xcf\xde\x3c\xf4\xc5\xbd\x05\x00\x00\xff\xff\xbd\x29\xe4\x16\xec\x01\x00\x00")

func viewsLayoutHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutHeaderHtml,
		"Views/layout/header.html",
	)
}

func viewsLayoutHeaderHtml() (*asset, error) {
	bytes, err := viewsLayoutHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Views/layout/header.html", size: 492, mode: os.FileMode(420), modTime: time.Unix(1571280714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Views/index/index.html": viewsIndexIndexHtml,
	"Views/layout/footer.html": viewsLayoutFooterHtml,
	"Views/layout/header.html": viewsLayoutHeaderHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Views": &bintree{nil, map[string]*bintree{
		"index": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{viewsIndexIndexHtml, map[string]*bintree{}},
		}},
		"layout": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{viewsLayoutFooterHtml, map[string]*bintree{}},
			"header.html": &bintree{viewsLayoutHeaderHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

